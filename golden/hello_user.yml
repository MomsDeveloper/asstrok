in_source: |-
  INT:
      LD R1, 0
      ADD R1, 1
      ST R1, 0
      ST R2, R1

      JE R2, GREET
      RST

  GREET:
      ; H
      SUB R1, R1
      ADD R1, 104
      OUT R1
      ; E
      SUB R1, R1
      ADD R1, 101
      OUT R1
      ; L
      SUB R1, R1
      ADD R1, 108
      OUT R1
      ; L
      SUB R1, R1
      ADD R1, 108
      OUT R1
      ; O
      SUB R1, R1
      ADD R1, 111
      OUT R1
      ; ,
      SUB R1, R1
      ADD R1, 44
      OUT R1
      ; SPACE
      SUB R1, R1
      ADD R1, 32
      OUT R1

  PRINT_NAME:
      SUB R1, R1
      ADD R1, 1

      PRINT_CHAR:
          LD R2, R1
          OUT R2
          LD R2, 0
          SUB R2, 1
          ADD R1, 1
          ST R2, 0
          JE R2, END
          JMP PRINT_CHAR

  END:
      HLT


  START:
      ; W
      SUB R1, R1
      ADD R1, 87
      OUT R1
      ; H
      SUB R1, R1
      ADD R1, 72
      OUT R1
      ; O
      SUB R1, R1
      ADD R1, 79
      OUT R1
      ; ?
      SUB R1, R1
      ADD R1, 63
      OUT R1

      LOOP: JMP LOOP

in_stdin: |-
  [(0, 'A'), (10, 'l'), (20, 'i'), (30, 'c'), (40, 'e'), (50, '\0')]
out_log: |
  INFO     root:machine.py:38 Starting simulation
  INFO     root:machine.py:39 Current State:
  TICK: 0	PC: 39
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 0	R2: 0	SP: 255
  STACK: []
  MEMORY: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionReg(opcode=<Opcode.SUB: 5>, dest=<Registers.R1: 0>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:40 
  INFO     root:machine.py:54 Current State: Interrupted with input: A
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 7	PC: 1
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 0	R2: 65	SP: 251
  STACK: [0, 40, 0, 0]
  MEMORY: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 8	PC: 2
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 0	R2: 65	SP: 251
  STACK: [0, 40, 0, 0]
  MEMORY: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 9	PC: 3
  ALU_L: 0	ALU_R: 1	ALU_OUT: 1
  R1: 1	R2: 65	SP: 251
  STACK: [0, 40, 0, 0]
  MEMORY: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 10	PC: 4
  ALU_L: 1	ALU_R: 0	ALU_OUT: 1
  R1: 1	R2: 65	SP: 251
  STACK: [0, 40, 0, 0]
  MEMORY: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State: Interrupted with input: l
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 17	PC: 1
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 1	R2: 108	SP: 247
  STACK: [0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 0, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 18	PC: 2
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 1	R2: 108	SP: 247
  STACK: [0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 0, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 19	PC: 3
  ALU_L: 1	ALU_R: 1	ALU_OUT: 2
  R1: 2	R2: 108	SP: 247
  STACK: [0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 0, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 20	PC: 4
  ALU_L: 2	ALU_R: 0	ALU_OUT: 2
  R1: 2	R2: 108	SP: 247
  STACK: [0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 0, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State: Interrupted with input: i
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 27	PC: 1
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 2	R2: 105	SP: 243
  STACK: [0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 28	PC: 2
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 2	R2: 105	SP: 243
  STACK: [0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 29	PC: 3
  ALU_L: 2	ALU_R: 1	ALU_OUT: 3
  R1: 3	R2: 105	SP: 243
  STACK: [0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 30	PC: 4
  ALU_L: 3	ALU_R: 0	ALU_OUT: 3
  R1: 3	R2: 105	SP: 243
  STACK: [0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 0, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State: Interrupted with input: c
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 37	PC: 1
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 3	R2: 99	SP: 239
  STACK: [0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 38	PC: 2
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 3	R2: 99	SP: 239
  STACK: [0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 39	PC: 3
  ALU_L: 3	ALU_R: 1	ALU_OUT: 4
  R1: 4	R2: 99	SP: 239
  STACK: [0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 40	PC: 4
  ALU_L: 4	ALU_R: 0	ALU_OUT: 4
  R1: 4	R2: 99	SP: 239
  STACK: [0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 0, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State: Interrupted with input: e
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 47	PC: 1
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 4	R2: 101	SP: 235
  STACK: [0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 48	PC: 2
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 4	R2: 101	SP: 235
  STACK: [0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 0, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 49	PC: 3
  ALU_L: 4	ALU_R: 1	ALU_OUT: 5
  R1: 5	R2: 101	SP: 235
  STACK: [0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 50	PC: 4
  ALU_L: 5	ALU_R: 0	ALU_OUT: 5
  R1: 5	R2: 101	SP: 235
  STACK: [0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 0, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 
  TICK: 51	PC: 5
  ALU_L: 101	ALU_R: 0	ALU_OUT: 101
  R1: 5	R2: 101	SP: 235
  STACK: [0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]

  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 57	PC: 1
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 5	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 58	PC: 2
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 5	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 59	PC: 3
  ALU_L: 5	ALU_R: 1	ALU_OUT: 6
  R1: 6	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R1: 0>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 60	PC: 4
  ALU_L: 6	ALU_R: 0	ALU_OUT: 6
  R1: 6	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 61	PC: 5
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 6	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpEqInstruction(opcode=<Opcode.JE: 9>, src=<Registers.R2: 1>, addr=7)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 62	PC: 7
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 6	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionReg(opcode=<Opcode.SUB: 5>, dest=<Registers.R1: 0>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 63	PC: 8
  ALU_L: 6	ALU_R: 6	ALU_OUT: 0
  R1: 0	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=104, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 64	PC: 9
  ALU_L: 0	ALU_R: 104	ALU_OUT: 104
  R1: 104	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R1: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 65	PC: 10
  ALU_L: 104	ALU_R: 0	ALU_OUT: 104
  R1: 104	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionReg(opcode=<Opcode.SUB: 5>, dest=<Registers.R1: 0>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 66	PC: 11
  ALU_L: 104	ALU_R: 104	ALU_OUT: 0
  R1: 0	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=101, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 67	PC: 12
  ALU_L: 0	ALU_R: 101	ALU_OUT: 101
  R1: 101	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R1: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 68	PC: 13
  ALU_L: 101	ALU_R: 0	ALU_OUT: 101
  R1: 101	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionReg(opcode=<Opcode.SUB: 5>, dest=<Registers.R1: 0>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 69	PC: 14
  ALU_L: 101	ALU_R: 101	ALU_OUT: 0
  R1: 0	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=108, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 70	PC: 15
  ALU_L: 0	ALU_R: 108	ALU_OUT: 108
  R1: 108	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R1: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 71	PC: 16
  ALU_L: 108	ALU_R: 0	ALU_OUT: 108
  R1: 108	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionReg(opcode=<Opcode.SUB: 5>, dest=<Registers.R1: 0>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 72	PC: 17
  ALU_L: 108	ALU_R: 108	ALU_OUT: 0
  R1: 0	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=108, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 73	PC: 18
  ALU_L: 0	ALU_R: 108	ALU_OUT: 108
  R1: 108	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R1: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 74	PC: 19
  ALU_L: 108	ALU_R: 0	ALU_OUT: 108
  R1: 108	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionReg(opcode=<Opcode.SUB: 5>, dest=<Registers.R1: 0>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 75	PC: 20
  ALU_L: 108	ALU_R: 108	ALU_OUT: 0
  R1: 0	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=111, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 76	PC: 21
  ALU_L: 0	ALU_R: 111	ALU_OUT: 111
  R1: 111	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R1: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 77	PC: 22
  ALU_L: 111	ALU_R: 0	ALU_OUT: 111
  R1: 111	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionReg(opcode=<Opcode.SUB: 5>, dest=<Registers.R1: 0>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 78	PC: 23
  ALU_L: 111	ALU_R: 111	ALU_OUT: 0
  R1: 0	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=44, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 79	PC: 24
  ALU_L: 0	ALU_R: 44	ALU_OUT: 44
  R1: 44	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R1: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 80	PC: 25
  ALU_L: 44	ALU_R: 0	ALU_OUT: 44
  R1: 44	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionReg(opcode=<Opcode.SUB: 5>, dest=<Registers.R1: 0>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 81	PC: 26
  ALU_L: 44	ALU_R: 44	ALU_OUT: 0
  R1: 0	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=32, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 82	PC: 27
  ALU_L: 0	ALU_R: 32	ALU_OUT: 32
  R1: 32	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R1: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 83	PC: 28
  ALU_L: 32	ALU_R: 0	ALU_OUT: 32
  R1: 32	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionReg(opcode=<Opcode.SUB: 5>, dest=<Registers.R1: 0>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 84	PC: 29
  ALU_L: 32	ALU_R: 32	ALU_OUT: 0
  R1: 0	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 85	PC: 30
  ALU_L: 0	ALU_R: 1	ALU_OUT: 1
  R1: 1	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 86	PC: 31
  ALU_L: 0	ALU_R: 1	ALU_OUT: 1
  R1: 1	R2: 65	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R2: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 87	PC: 32
  ALU_L: 65	ALU_R: 0	ALU_OUT: 65
  R1: 1	R2: 65	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 88	PC: 33
  ALU_L: 65	ALU_R: 0	ALU_OUT: 65
  R1: 1	R2: 6	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.SUB: 5>, dest=<Registers.R2: 1>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 89	PC: 34
  ALU_L: 6	ALU_R: 1	ALU_OUT: 5
  R1: 1	R2: 5	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 90	PC: 35
  ALU_L: 1	ALU_R: 1	ALU_OUT: 2
  R1: 2	R2: 5	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [6, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 91	PC: 36
  ALU_L: 5	ALU_R: 0	ALU_OUT: 5
  R1: 2	R2: 5	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpEqInstruction(opcode=<Opcode.JE: 9>, src=<Registers.R2: 1>, addr=38)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 92	PC: 37
  ALU_L: 5	ALU_R: 0	ALU_OUT: 5
  R1: 2	R2: 5	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpInstruction(opcode=<Opcode.JMP: 8>, addr=30)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 93	PC: 30
  ALU_L: 5	ALU_R: 0	ALU_OUT: 5
  R1: 2	R2: 5	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 94	PC: 31
  ALU_L: 5	ALU_R: 0	ALU_OUT: 5
  R1: 2	R2: 108	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R2: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 95	PC: 32
  ALU_L: 108	ALU_R: 0	ALU_OUT: 108
  R1: 2	R2: 108	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 96	PC: 33
  ALU_L: 108	ALU_R: 0	ALU_OUT: 108
  R1: 2	R2: 5	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.SUB: 5>, dest=<Registers.R2: 1>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 97	PC: 34
  ALU_L: 5	ALU_R: 1	ALU_OUT: 4
  R1: 2	R2: 4	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 98	PC: 35
  ALU_L: 2	ALU_R: 1	ALU_OUT: 3
  R1: 3	R2: 4	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [5, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 99	PC: 36
  ALU_L: 4	ALU_R: 0	ALU_OUT: 4
  R1: 3	R2: 4	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpEqInstruction(opcode=<Opcode.JE: 9>, src=<Registers.R2: 1>, addr=38)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 100	PC: 37
  ALU_L: 4	ALU_R: 0	ALU_OUT: 4
  R1: 3	R2: 4	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpInstruction(opcode=<Opcode.JMP: 8>, addr=30)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 101	PC: 30
  ALU_L: 4	ALU_R: 0	ALU_OUT: 4
  R1: 3	R2: 4	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 102	PC: 31
  ALU_L: 4	ALU_R: 0	ALU_OUT: 4
  R1: 3	R2: 105	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R2: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 103	PC: 32
  ALU_L: 105	ALU_R: 0	ALU_OUT: 105
  R1: 3	R2: 105	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 104	PC: 33
  ALU_L: 105	ALU_R: 0	ALU_OUT: 105
  R1: 3	R2: 4	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.SUB: 5>, dest=<Registers.R2: 1>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 105	PC: 34
  ALU_L: 4	ALU_R: 1	ALU_OUT: 3
  R1: 3	R2: 3	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 106	PC: 35
  ALU_L: 3	ALU_R: 1	ALU_OUT: 4
  R1: 4	R2: 3	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [4, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 107	PC: 36
  ALU_L: 3	ALU_R: 0	ALU_OUT: 3
  R1: 4	R2: 3	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpEqInstruction(opcode=<Opcode.JE: 9>, src=<Registers.R2: 1>, addr=38)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 108	PC: 37
  ALU_L: 3	ALU_R: 0	ALU_OUT: 3
  R1: 4	R2: 3	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpInstruction(opcode=<Opcode.JMP: 8>, addr=30)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 109	PC: 30
  ALU_L: 3	ALU_R: 0	ALU_OUT: 3
  R1: 4	R2: 3	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 110	PC: 31
  ALU_L: 3	ALU_R: 0	ALU_OUT: 3
  R1: 4	R2: 99	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R2: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 111	PC: 32
  ALU_L: 99	ALU_R: 0	ALU_OUT: 99
  R1: 4	R2: 99	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 112	PC: 33
  ALU_L: 99	ALU_R: 0	ALU_OUT: 99
  R1: 4	R2: 3	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.SUB: 5>, dest=<Registers.R2: 1>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 113	PC: 34
  ALU_L: 3	ALU_R: 1	ALU_OUT: 2
  R1: 4	R2: 2	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 114	PC: 35
  ALU_L: 4	ALU_R: 1	ALU_OUT: 5
  R1: 5	R2: 2	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [3, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 115	PC: 36
  ALU_L: 2	ALU_R: 0	ALU_OUT: 2
  R1: 5	R2: 2	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpEqInstruction(opcode=<Opcode.JE: 9>, src=<Registers.R2: 1>, addr=38)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 116	PC: 37
  ALU_L: 2	ALU_R: 0	ALU_OUT: 2
  R1: 5	R2: 2	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpInstruction(opcode=<Opcode.JMP: 8>, addr=30)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 117	PC: 30
  ALU_L: 2	ALU_R: 0	ALU_OUT: 2
  R1: 5	R2: 2	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 118	PC: 31
  ALU_L: 2	ALU_R: 0	ALU_OUT: 2
  R1: 5	R2: 101	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R2: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 119	PC: 32
  ALU_L: 101	ALU_R: 0	ALU_OUT: 101
  R1: 5	R2: 101	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 120	PC: 33
  ALU_L: 101	ALU_R: 0	ALU_OUT: 101
  R1: 5	R2: 2	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.SUB: 5>, dest=<Registers.R2: 1>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 121	PC: 34
  ALU_L: 2	ALU_R: 1	ALU_OUT: 1
  R1: 5	R2: 1	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 122	PC: 35
  ALU_L: 5	ALU_R: 1	ALU_OUT: 6
  R1: 6	R2: 1	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [2, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 123	PC: 36
  ALU_L: 1	ALU_R: 0	ALU_OUT: 1
  R1: 6	R2: 1	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpEqInstruction(opcode=<Opcode.JE: 9>, src=<Registers.R2: 1>, addr=38)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 124	PC: 37
  ALU_L: 1	ALU_R: 0	ALU_OUT: 1
  R1: 6	R2: 1	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpInstruction(opcode=<Opcode.JMP: 8>, addr=30)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 125	PC: 30
  ALU_L: 1	ALU_R: 0	ALU_OUT: 1
  R1: 6	R2: 1	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionReg(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=<Registers.R1: 0>, arg_type=<ArgType.REG: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 126	PC: 31
  ALU_L: 1	ALU_R: 0	ALU_OUT: 1
  R1: 6	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOOutInstruction(opcode=<Opcode.OUT: 14>, src=<Registers.R2: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 127	PC: 32
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 6	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.LD: 12>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 128	PC: 33
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 6	R2: 1	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.SUB: 5>, dest=<Registers.R2: 1>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 129	PC: 34
  ALU_L: 1	ALU_R: 1	ALU_OUT: 0
  R1: 6	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ArithmeticInstructionImm(opcode=<Opcode.ADD: 4>, dest=<Registers.R1: 0>, src=1, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 130	PC: 35
  ALU_L: 6	ALU_R: 1	ALU_OUT: 7
  R1: 7	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [1, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  IOMemoryInstructionImm(opcode=<Opcode.ST: 13>, dest=<Registers.R2: 1>, src=0, arg_type=<ArgType.IMM: 1>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 131	PC: 36
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 7	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [0, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  JumpEqInstruction(opcode=<Opcode.JE: 9>, src=<Registers.R2: 1>, addr=38)
  INFO     root:machine.py:55 
  INFO     root:machine.py:54 Current State:
  TICK: 132	PC: 38
  ALU_L: 0	ALU_R: 0	ALU_OUT: 0
  R1: 7	R2: 0	SP: 231
  STACK: [0, 5, 101, 5, 0, 5, 99, 4, 0, 5, 105, 3, 0, 5, 108, 2, 0, 5, 65, 1, 0, 40, 0, 0]
  MEMORY: [0, 65, 108, 105, 99, 101, 0, 0, 0, 0]
  Instruction to execute:
  ManagementInstruction(opcode=<Opcode.HLT: 0>)
  INFO     root:machine.py:55 
  INFO     root:machine.py:78 Simulation finished
  INFO     root:machine.py:79 Output buffer:
out_stdout: |
  ============================================================
out_code: !!binary |
  ACegAcgASAHYANQAmAfwAFAASGjgAFAASGXgAFAASGzgAFAASGzgAFAASG/gAFAASCzgAFAASCDg
  AFAASAHEAOgAzABcAUgB3ACYJoAeAABQAEhX4ABQAEhI4ABQAEhP4ABQAEg/4ACAMw==
